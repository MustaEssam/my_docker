# cd rtabmap
# docker build -t rtabmap_frontiers -f docker/frontiers2022/Dockerfile .
FROM nvcr.io/nvidia/pytorch:23.08-py3

ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies
RUN apt-get update && apt-get install -y \
      libsqlite3-dev \
      libpcl-dev \
      git \
      cmake \
      libyaml-cpp-dev \
      software-properties-common \
      pkg-config \ 
      wget \
      libsuitesparse-dev \
      pybind11-dev \
      libeigen3-dev \
      libspdlog-dev \
      qtdeclarative5-dev \
      qt5-qmake \
      libqglviewer-dev-qt5 \
      build-essential \
      libboost-all-dev \
      libfmt-dev \
      python-is-python3

# g2o (removing config because cs.h not found error: https://github.com/introlab/rtabmap/issues/835)
RUN git clone https://github.com/RainerKuemmerle/g2o.git && \
    cd g2o && \
    git checkout 20201223_git && \
    mkdir build && \
    cd build && \
    cmake -DBUILD_LGPL_SHARED_LIBS=ON -DG2O_BUILD_APPS=OFF -DBUILD_WITH_MARCH_NATIVE=OFF -DG2O_BUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release .. && \
    make -j$(nproc) && \
    make install && \
    cd /workspace && \
    rm -rf g2o /usr/local/lib/cmake/g2o

# GTSAM
# GTSAM
# RUN add-apt-repository ppa:borglab/gtsam-release-4.0 && \
#     apt install -y libgtsam-dev libgtsam-unstable-dev

# GTSAM - Build from source
RUN apt-get update && \
    cd /tmp && \
    git clone https://github.com/borglab/gtsam.git && \
    cd gtsam && \
    mkdir build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make -j$(nproc) && \
    make install && \
    ldconfig && \
    cd / && rm -rf /tmp/gtsam


# OpenCV with xfeatures2d and nonfree modules
RUN git clone https://github.com/opencv/opencv_contrib.git && \
    git clone https://github.com/opencv/opencv.git && \
    cd opencv_contrib && \
    git checkout tags/4.10.0 && \
    cd /workspace && \
    cd opencv && \
    git checkout tags/4.10.0 && \
    mkdir build && \
    cd build && \
    cmake -DOPENCV_EXTRA_MODULES_PATH=/workspace/opencv_contrib/modules \
        -DCMAKE_BUILD_TYPE=Release \
        -DBUILD_SHARED_LIBS=ON \
        -DBUILD_TESTS=OFF \
        -DBUILD_PERF_TESTS=OFF \
        -DOPENCV_ENABLE_NONFREE=ON \
        -DWITH_CUDA=ON \
        -DCUDA_ARCH_BIN="6.0,6.1,7.0,7.5,8.0,8.6,8.9,9.0" .. && \
    make -j$(nproc) && \
    make install && \
    cd /workspace && \
    rm -rf /opencv_ws/opencv /opencv_ws/opencv_contrib
    

# Install locale and dependencies for ROS 2
RUN apt update && \
    apt install -y \
    locales \
    curl \
    gnupg2 \
    lsb-release \
    software-properties-common && \
    locale-gen en_US en_US.UTF-8 && \
    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && \
    export LANG=en_US.UTF-8

# Add ROS 2 GPG key and repo
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key | apt-key add - && \
    add-apt-repository universe && \
    echo "deb http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list

# Install ROS 2 Humble
RUN apt update && apt install -y \
    ros-humble-desktop \
    python3-colcon-common-extensions \
    python3-rosdep \
    python3-argcomplete \
    build-essential && \
    rosdep init && \
    rosdep update

# Source ROS 2 setup
SHELL ["/bin/bash", "-c"]
RUN echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc

# Install rtabmap_ros, nav2, robot_control, ros2_canopen dependencies
RUN apt update && apt install -y \
    ros-humble-navigation2 \
    ros-humble-nav2-bringup 

# Create workspace and clone packages if needed
WORKDIR /root/ros2_ws/src

# Optional: clone from source if you want to build custom versions
RUN git clone https://github.com/introlab/rtabmap_ros.git -b humble-devel
# RUN git clone https://github.com/ros-planning/navigation2.git -b humble
# RUN git clone https://github.com/PickNikRobotics/robot_control.git -b humble
# RUN git clone https://github.com/ros-industrial/ros2_canopen.git -b humble

# Copy current source code
COPY rtabmap rtabmap
RUN cp -r rtabmap/archive/2022-IlluminationInvariant/scripts scripts && \
    chmod +x scripts/*.sh 

# Superpoint model
RUN cd scripts && \
    wget https://github.com/magicleap/SuperPointPretrainedNetwork/raw/master/superpoint_v1.pth && \
    wget https://raw.githubusercontent.com/magicleap/SuperPointPretrainedNetwork/master/demo_superpoint.py && \
    python trace.py && \
    rm superpoint_v1.pth demo_superpoint.py
    
# Superglue
RUN cd scripts && \
    git clone https://github.com/magicleap/SuperGluePretrainedNetwork && \
    cp /root/ros2_ws/src/rtabmap/corelib/src/python/rtabmap_superglue.py SuperGluePretrainedNetwork/.

# Build workspace
WORKDIR /root/ros2_ws
RUN . /opt/ros/humble/setup.sh && \
    rosdep install --from-paths src --ignore-src -r -y --skip-keys "opencv rtabmap" && \
    colcon build --symlink-install \
    --cmake-args \
        -DTorch_DIR=/usr/local/lib/python3.10/dist-packages/torch/share/cmake/Torch \
        -DWITH_TORCH=ON \
        -DWITH_PYTHON=ON \
        -DWITH_QT=ON \
        -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \
        -DCUDA_HOME=/usr/local/cuda \
        -DCMAKE_CXX_STANDARD=17 \
    --parallel-workers 4

RUN rm -rf /opt/hpcx/ucx


# Install packages
RUN apt update && apt install -y \
    ros-humble-robot-localization \
    python3-pip \
    ros-humble-rmw-cyclonedds-cpp \
    ros-dev-tools \
    ros-humble-rmf-dev \
    wget \
    gnupg \
    software-properties-common

# Source overlay workspace
RUN echo "source /root/ros2_ws/install/setup.bash" >> ~/.bashrc

# Setup environment variables
COPY rtabmap_ros_entrypoint.sh /rtabmap_ros_entrypoint.sh
RUN chmod 755 /rtabmap_ros_entrypoint.sh

WORKDIR /root

ENTRYPOINT ["/rtabmap_ros_entrypoint.sh"]

CMD ["/bin/bash"]
